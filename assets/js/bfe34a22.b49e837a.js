"use strict";(self.webpackChunkmetapage_docs=self.webpackChunkmetapage_docs||[]).push([[1948],{3206:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>m});var a=t(1527),o=t(3703);const r={title:"Embed a metapage in your react app",sidebar_position:2,slug:"/embed-metapage"},i=void 0,s={id:"Embed/embed-metapage",title:"Embed a metapage in your react app",description:"Live example",source:"@site/docs/Embed/embed-metapage.mdx",sourceDirName:"Embed",slug:"/embed-metapage",permalink:"/docs/embed-metapage",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Embed a metapage in your react app",sidebar_position:2,slug:"/embed-metapage"},sidebar:"tutorialSidebar",previous:{title:"Embed a metaframe in a react app",permalink:"/docs/embed-metaframe"},next:{title:"Embed the metapage editor + library",permalink:"/docs/embed-metapage-library"}},p={},m=[{value:"<strong>Live example</strong>",id:"a526da9609654d26b4843460cfa5a0f6",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.mermaid,{value:"flowchart LR\n    subgraph test [your-site.com]\n        direction TB\n\n        style js fill:#fff,stroke:#fff,stroke-width:2px\n        style mf1 fill:#fff,stroke:#32AEE4,stroke-width:2px\n        style mf2 fill:#fff,stroke:#32AEE4,stroke-width:2px\n        style mf3 fill:#fff,stroke:#32AEE4,stroke-width:2px\n\n        subgraph metapage [metapage]\n\n            mf1[metaframe 1] --\x3e mf2[metaframe 2]\n            mf2 --\x3e mf3[metaframe 3]\n            mf1 --\x3e mf3\n        end\n        js[ javascript] <--\x3e |messages| metapage\n    end"}),"\n",(0,a.jsx)(n.h2,{id:"a526da9609654d26b4843460cfa5a0f6",children:(0,a.jsx)(n.strong,{children:"Live example"})}),"\n",(0,a.jsx)(n.p,{children:"This live example shows how to embed a metapage in a react app."}),"\n",(0,a.jsx)(n.p,{children:"First imports:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import { MetapageGridLayoutFromDefinition } from "@metapages/metapage-grid-react";\n'})}),"\n",(0,a.jsxs)(n.p,{children:["You can copy the metapage JSON (blue button) and paste in ",(0,a.jsx)(n.a,{href:"https://app.metapages.org/",children:"https://app.metapages.org/"})," to see the live app."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",metastring:"live",live:!0,children:'function ExampleEmbedMetapage() {\n  var exampleDefinition = {\n    version: "0.3",\n    meta: {\n      layouts: {\n        "react-grid-layout": {\n          docs: "https://www.npmjs.com/package/react-grid-layout",\n          props: {\n            cols: 12,\n            margin: [10, 20],\n            rowHeight: 200,\n            containerPadding: [5, 5],\n          },\n          layout: [\n            {\n              i: "random-data-generator",\n              x: 0,\n              y: 0,\n              w: 6,\n              h: 3,\n            },\n            {\n              i: "graph-dynamic",\n              x: 6,\n              y: 0,\n              w: 6,\n              h: 4,\n            },\n            {\n              i: "editor",\n              x: 0,\n              y: 1,\n              w: 6,\n              h: 2,\n            },\n          ],\n        },\n      },\n    },\n    metaframes: {\n      "random-data-generator": {\n        url: "https://random.mtfm.io/?edit=true#?distribution=eyJkaXN0cmlidXRpb24iOiJ1bmlmb3JtIiwiZnJlcXVlbmN5IjozLCJvcHRpb25zIjp7Im1heCI6MSwibWluIjowfSwic2hvd091dHB1dCI6dHJ1ZX0=&hidemenu=true",\n      },\n      "graph-dynamic": {\n        url: "https://app.metapage.io/mf/cmxaaecuff?edit=true",\n        inputs: [\n          {\n            metaframe: "random-data-generator",\n            source: "y",\n            target: "y",\n          },\n        ],\n      },\n      editor: {\n        url: "https://editor.mtfm.io/",\n        inputs: [\n          {\n            metaframe: "random-data-generator",\n            source: "v",\n            target: "y",\n          },\n        ],\n      },\n    },\n    plugins: [\n      "https://metapages.org/metaframes/mermaid.js/?TITLE=0",\n      "https://editor.mtfm.io/",\n    ],\n  };\n\n  const [definition, setDefinition] = useState(exampleDefinition);\n\n  const onOutputs = (outputs) => {\n    // This is where the metapage state changes, via metaframes setting\n    // outputs and passing them to downstream metaframes.\n    // You can intercept the data state changes for your own purposes\n    // console.log(`Got outputs!! outputs=${JSON.stringify(outputs)}`);\n  };\n\n  // hack to copy metapage JSON to clipboard\n  const copyToClipboard = useCallback(() => {\n    var textarea = document.createElement("textarea");\n    textarea.value = JSON.stringify(exampleDefinition);\n    document.body.appendChild(textarea);\n    textarea.select();\n    document.execCommand("copy");\n    document.body.removeChild(textarea);\n  }, [exampleDefinition]);\n\n  const CustomGridItemComponentLabel = useMemo(() => {\n    return React.forwardRef((props, ref) => {\n      return (\n        <div\n          style={{\n            overflow: "hidden",\n            padding: "10px",\n            backgroundColor: "white",\n            border: "1px solid lightgrey",\n            ...props.style,\n          }}\n          className={props.className}\n          ref={ref}\n        >\n          <h4 style={{ textAlign: "right" }}>\n            <span style={{ padding: "2px", color: "lightgrey" }}>\n              {props.children[0].key}\n            </span>\n          </h4>\n          {props.children}\n        </div>\n      );\n    });\n  }, []);\n\n  const onDefinition = useCallback(\n    (def) => {\n      setDefinition(def);\n    },\n    [setDefinition]\n  );\n\n  return (\n    <>\n      <button\n        onClick={copyToClipboard}\n        style={{\n          backgroundColor: "#32AEE4",\n          borderWidth: "0px",\n          color: "#ffffff",\n          fontWeight: 800,\n          position: "relative",\n          outline: "none",\n          borderRadius: "6px",\n          display: "flex",\n          justifyContent: "center",\n          alignItems: "center",\n          cursor: "pointer",\n          height: "30px",\n          width: "120px",\n        }}\n      >\n        Copy metapage\n      </button>\n      <MetapageGridLayoutFromDefinition\n        definition={definition}\n        onOutputs={onOutputs}\n        onDefinition={onDefinition}\n        Wrapper={CustomGridItemComponentLabel}\n      />\n    </>\n  );\n}\n'})})]})}function c(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},3703:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>i});var a=t(959);const o={},r=a.createContext(o);function i(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);