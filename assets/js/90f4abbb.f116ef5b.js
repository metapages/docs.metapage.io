"use strict";(self.webpackChunkmetapage_docs=self.webpackChunkmetapage_docs||[]).push([[279],{33222:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"Getting-Started/python-container-walkthrough","title":"Running Python in a Container","description":"You can write python scripts or snippets and run the code in container metaframes. You can define your own docker images and automatically build images from git repos, and publish or share any of these tools.","source":"@site/docs/Getting-Started/python-container-walkthrough.mdx","sourceDirName":"Getting-Started","slug":"/python-container-walkthrough","permalink":"/docs/python-container-walkthrough","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Running Python in a Container","sidebar_position":2,"slug":"/python-container-walkthrough","authors":["dion"]},"sidebar":"tutorialSidebar","previous":{"title":"Creating your first metapage","permalink":"/docs/your-first-metapage"},"next":{"title":"Working with docker metaframes","permalink":"/docs/working-with-docker-metaframes"}}');var o=n(74848),i=n(28453);const s={title:"Running Python in a Container",sidebar_position:2,slug:"/python-container-walkthrough",authors:["dion"]},r=void 0,c={},d=[];function h(e){const t={a:"a",code:"code",em:"em",img:"img",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"You can write python scripts or snippets and run the code in container metaframes. You can define your own docker images and automatically build images from git repos, and publish or share any of these tools."}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Step 1:"})," From the ",(0,o.jsx)(t.a,{href:"http://metapage.io/",children:"metapage.io"})," homepage, create a new metapage using the ",(0,o.jsx)(t.code,{children:"+ New"})," button and giving the metapage a name. We call it \u201cPython metapage\u201d here."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{src:n(64326).A+"",width:"2534",height:"344"})}),"\n",(0,o.jsx)(t.p,{children:"**Step 2: \u201c**Add from search\u201d, then search for \u201cmatplotlib\u201d, select it, and add to the page with the \u201c+ Add\u201d button. The metaframe should now display on the metapage:"}),"\n",(0,o.jsxs)("div",{className:"custom-docunotion-row",children:[(0,o.jsx)("div",{className:"custom-docunotion-row-cell",children:(0,o.jsx)("p",{children:(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{src:n(73232).A+"",width:"714",height:"856"})})})}),(0,o.jsx)("div",{className:"custom-docunotion-row-cell",children:(0,o.jsx)("p",{children:(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{src:n(45268).A+"",width:"2334",height:"1356"})})})})]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Step 3:"})," You should see python code for plotting a matplotlib image. But no image yet, we will get to that below."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{src:n(52932).A+"",width:"2508",height:"1196"})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Step 4:"})," Let\u2019s edit the code. We will generate some noisy data, export a plot and then view that plot with the ",(0,o.jsx)(t.code,{children:"Show Image"})," frame. Copy ",(0,o.jsx)(t.em,{children:"the code below into the editor of the python metaframe."})," In this code, we generate data points on a line with some noise added, create a plot of these points with matplotlib, and finally map the generated image to the metaframe\u2019s output."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'import matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate data from a y=x line with noise\nx_line = np.linspace(0, 1, 20)\ny_line = x_line + np.random.normal(scale=0.1, size=x_line.shape)\n#print(x_line, y_line)\n\n# Create a scatter plot for the y=x line with noise\nplt.figure(figsize=(10, 6))\nplt.scatter(x_line, y_line, color=\'blue\')\n\n# Add labels and title\nplt.title("Noisy Line Scatterplot (y = x + noise)")\nplt.xlabel("X-axis")\nplt.ylabel("Y-axis")\n\nplt.savefig(\'/outputs/image.png\')\n\nprint("Sent image1.png!")\n\n# Close the current active figure\nplt.close()\n\n'})}),"\n",(0,o.jsx)(t.p,{children:"Result: Job Complete"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{src:n(97897).A+"",width:"2492",height:"294"})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Step 7:"})," If the code runs correctly you should see Sent image1.png! to the right of the code (and three output files indicated by the ",(0,o.jsx)(t.code,{children:"3"})," in green at the top right)."]}),"\n",(0,o.jsx)(t.p,{children:"Now if we want to actually view the image we need to create a \u201cShow Image\u201d metaframe and perform a data connection. Instead of adding via the \u201c+Add\u201d button and modal, you can also add from the gallery."}),"\n",(0,o.jsxs)("div",{className:"custom-docunotion-row",children:[(0,o.jsx)("div",{className:"custom-docunotion-row-cell",children:(0,o.jsx)("p",{children:"To do this, use the search bar to find the \u201cShow Image\u201d metaframe:"})}),(0,o.jsx)("div",{className:"custom-docunotion-row-cell",children:(0,o.jsx)("p",{children:(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{src:n(15858).A+"",width:"1426",height:"688"})})})})]}),"\n",(0,o.jsxs)("div",{className:"custom-docunotion-row",children:[(0,o.jsx)("div",{className:"custom-docunotion-row-cell",children:(0,o.jsx)("p",{children:"and add it using the \u201c+Add to Metapage\u201d via the dropdown"})}),(0,o.jsx)("div",{className:"custom-docunotion-row-cell",children:(0,o.jsx)("p",{children:(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{src:n(26718).A+"",width:"1012",height:"546"})})})})]}),"\n",(0,o.jsxs)("div",{className:"custom-docunotion-row",children:[(0,o.jsx)("div",{className:"custom-docunotion-row-cell",children:(0,o.jsx)("p",{children:"Resize to fit better"})}),(0,o.jsx)("div",{className:"custom-docunotion-row-cell",children:(0,o.jsx)("p",{children:(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{src:n(83735).A+"",width:"480",height:"378"})})})})]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Step 8:"})," Let\u2019s make the data connection. Click on the \u201cData Flow\u201d button on the \u201cPython with Pyodide\u201d metaframe. Ensure that the Outputs tab is selected and the \u201cShow Image\u201d box in the upper section is orange, then simply click on the image1.png box next to the source metaframe. This will create a connection that sends this file to the target."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{src:n(18638).A+"",width:"2188",height:"1380"})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Step 10:"})," Click Save. You should now see the plot displayed in your \u201cShow Image\u201d metaframe."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{src:n(99747).A+"",width:"1838",height:"1118"})}),"\n",(0,o.jsx)(t.p,{children:"Congratulations on creating your first metapage that runs python code and displays a plot of its output! As we mentioned earlier, running docker containers in metaframes allow for a greater efficiency and range of applications. We will demonstrate how to use these in the next walkthrough."}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://metapage.io/dion/Python-metapage-d045e8a6dbdd4364b4dd72b58e5a8fc0",children:"Solution"})})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},45268:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/python-container-walkthrough.1a601857-9bb5-8007-be8e-ffbedabb6d97-2ada29dd247095ecffcd41d13f0ec574.png"},97897:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/python-container-walkthrough.1a601857-9bb5-8039-99cd-cd9812454493-91d88f12c1e2d1ef5e0f0a10f78dc47d.png"},64326:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/python-container-walkthrough.1a601857-9bb5-8064-8cae-feff4b605cee-44ea7a7e45cb1c49e0d46a3ad493efcc.png"},99747:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/python-container-walkthrough.1a601857-9bb5-8071-9153-c74001c2cb75-9152d8cea4134957577a52ac29955528.png"},83735:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/python-container-walkthrough.1a601857-9bb5-80a6-a874-cc96c7046e1d-3aa2109d1e01b5ac6f9440f74ab633db.gif"},26718:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/python-container-walkthrough.1a601857-9bb5-80b7-8537-ec0e6a1dca52-eebf7719a1396155becf043d14d7ceec.png"},73232:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/python-container-walkthrough.1a601857-9bb5-80c7-9705-d1b4393eccea-165feff1af203a5028dd55fcda4fdc30.png"},15858:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/python-container-walkthrough.1a601857-9bb5-80d8-b1ac-ca1f46715210-89eb32dba8a0be468f3f2cee392b22b7.png"},52932:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/python-container-walkthrough.1a601857-9bb5-80e1-9c4c-d6b8faff5c33-a1f7f6ce86ac88fedf194064f8e8fe6e.png"},18638:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/python-container-walkthrough.1a601857-9bb5-80f3-842d-df1799a8956d-4a57fbad20026ed79ab370cd96fd0d1e.png"},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>r});var a=n(96540);const o={},i=a.createContext(o);function s(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);