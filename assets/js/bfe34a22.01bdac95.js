"use strict";(self.webpackChunkmetapage_docs=self.webpackChunkmetapage_docs||[]).push([[1948],{9613:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>g});var a=t(9496);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),m=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=m(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),c=m(t),u=r,g=c["".concat(s,".").concat(u)]||c[u]||d[u]||o;return t?a.createElement(g,i(i({ref:n},l),{},{components:t})):a.createElement(g,i({ref:n},l))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p[c]="string"==typeof e?e:r,i[1]=p;for(var m=2;m<o;m++)i[m]=t[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7159:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>p,toc:()=>m});var a=t(1163),r=(t(9496),t(9613));const o={title:"Embed a metapage in your react app",sidebar_position:2,slug:"/embed-metapage"},i=void 0,p={unversionedId:"Embed/embed-metapage",id:"Embed/embed-metapage",title:"Embed a metapage in your react app",description:"Live example",source:"@site/docs/Embed/embed-metapage.mdx",sourceDirName:"Embed",slug:"/embed-metapage",permalink:"/docs/embed-metapage",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Embed a metapage in your react app",sidebar_position:2,slug:"/embed-metapage"},sidebar:"tutorialSidebar",previous:{title:"Embed a metaframe in a react app",permalink:"/docs/embed-metaframe"},next:{title:"Embed the metapage editor + library",permalink:"/docs/embed-metapage-library"}},s={},m=[{value:"<strong>Live example</strong>",id:"a526da9609654d26b4843460cfa5a0f6",level:2}],l={toc:m},c="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(c,(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"a526da9609654d26b4843460cfa5a0f6"},(0,r.kt)("strong",{parentName:"h2"},"Live example")),(0,r.kt)("p",null,"This live example shows how to embed a metapage in a react app."),(0,r.kt)("p",null,"First imports:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { MetapageGridLayoutFromDefinition } from "@metapages/metapage-grid-react";\n')),(0,r.kt)("p",null,"You can copy the metapage JSON (blue button) and paste in ",(0,r.kt)("a",{parentName:"p",href:"https://app.metapages.org/"},"https://app.metapages.org/")," to see the live app."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function ExampleEmbedMetapage() {\n  var exampleDefinition = {\n    version: "0.3",\n    meta: {\n      layouts: {\n        "react-grid-layout": {\n          docs: "https://www.npmjs.com/package/react-grid-layout",\n          props: {\n            cols: 12,\n            margin: [10, 20],\n            rowHeight: 200,\n            containerPadding: [5, 5],\n          },\n          layout: [\n            {\n              i: "random-data-generator",\n              x: 0,\n              y: 0,\n              w: 6,\n              h: 3,\n            },\n            {\n              i: "graph-dynamic",\n              x: 6,\n              y: 0,\n              w: 6,\n              h: 4,\n            },\n            {\n              i: "editor",\n              x: 0,\n              y: 1,\n              w: 6,\n              h: 2,\n            },\n          ],\n        },\n      },\n    },\n    metaframes: {\n      "random-data-generator": {\n        url: "https://metapages.org/metaframes/random-data-generator/?frequency=1000",\n      },\n      "graph-dynamic": {\n        url: "https://metapages.org/metaframes/graph-dynamic/",\n        inputs: [\n          {\n            metaframe: "random-data-generator",\n            source: "y",\n            target: "y",\n          },\n        ],\n      },\n      editor: {\n        url: "https://editor.mtfm.io/",\n        inputs: [\n          {\n            metaframe: "random-data-generator",\n            source: "y",\n            target: "value",\n          },\n        ],\n      },\n    },\n    plugins: [\n      "https://metapages.org/metaframes/mermaid.js/?TITLE=0",\n      "https://editor.mtfm.io/",\n    ],\n  };\n\n  const [definition, setDefinition] = useState(exampleDefinition);\n\n  const onOutputs = (outputs) => {\n    // This is where the metapage state changes, via metaframes setting\n    // outputs and passing them to downstream metaframes.\n    // You can intercept the data state changes for your own purposes\n    // console.log(`Got outputs!! outputs=${JSON.stringify(outputs)}`);\n  };\n\n  // hack to copy metapage JSON to clipboard\n  const copyToClipboard = useCallback(() => {\n    var textarea = document.createElement("textarea");\n    textarea.value = JSON.stringify(exampleDefinition);\n    document.body.appendChild(textarea);\n    textarea.select();\n    document.execCommand("copy");\n    document.body.removeChild(textarea);\n  }, [exampleDefinition]);\n\n  const CustomGridItemComponentLabel = useMemo(() => {\n    return React.forwardRef((props, ref) => {\n      return (\n        <div\n          style={{\n            overflow: "hidden",\n            padding: "10px",\n            backgroundColor: "white",\n            border: "1px solid lightgrey",\n            ...props.style,\n          }}\n          className={props.className}\n          ref={ref}\n        >\n          <h4 style={{ textAlign: "right" }}>\n            <span style={{ padding: "2px", color: "lightgrey" }}>\n              {props.children[0].key}\n            </span>\n          </h4>\n          {props.children}\n        </div>\n      );\n    });\n  }, []);\n\n  const onDefinition = useCallback(\n    (def) => {\n      setDefinition(def);\n    },\n    [setDefinition]\n  );\n\n  return (\n    <>\n      <button\n        onClick={copyToClipboard}\n        style={{\n          backgroundColor: "#32AEE4",\n          borderWidth: "0px",\n          color: "#ffffff",\n          fontWeight: 800,\n          position: "relative",\n          outline: "none",\n          borderRadius: "6px",\n          display: "flex",\n          justifyContent: "center",\n          alignItems: "center",\n          cursor: "pointer",\n          height: "30px",\n          width: "120px",\n        }}\n      >\n        Copy metapage\n      </button>\n      <MetapageGridLayoutFromDefinition\n        definition={definition}\n        onOutputs={onOutputs}\n        onDefinition={onDefinition}\n        Wrapper={CustomGridItemComponentLabel}\n      />\n    </>\n  );\n}\n')))}d.isMDXComponent=!0}}]);