"use strict";(self.webpackChunkmetapage_docs=self.webpackChunkmetapage_docs||[]).push([[3422],{28453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>i});var t=o(96540);const s={},r=t.createContext(s);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:n},e.children)}},57130:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Containers/container-provider-flyio","title":"fly.io","description":"f71aa082c32c49d1a43a8add8fbca628}","source":"@site/docs/Containers/container-provider-flyio.mdx","sourceDirName":"Containers","slug":"/container-provider-flyio","permalink":"/docs/container-provider-flyio","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"fly.io","sidebar_position":3,"slug":"/container-provider-flyio","authors":["dion","miend"]},"sidebar":"tutorialSidebar","previous":{"title":"local","permalink":"/docs/container-local-mode"},"next":{"title":"worker cli reference","permalink":"/docs/container-cli-reference"}}');var s=o(74848),r=o(28453);const a={title:"fly.io",sidebar_position:3,slug:"/container-provider-flyio",authors:["dion","miend"]},i="Deployment on Fly.io {#f71aa082c32c49d1a43a8add8fbca628}",l={},c=[{value:"Prerequisites",id:"f58f1df8856f4eeebe706cccae23e8cc",level:2},{value:"Hey, what is this TOML file doing?",id:"7733defd882c43879c1aca35bd0f9fad",level:3},{value:"Scale the workers",id:"e483fac6e3864e15ad1eb91a094feb75",level:2},{value:"<em>Auto</em>-scale the workers",id:"8e81556971984e71ac4568c5aec1dc5d",level:2},{value:"Metrics proxy",id:"06965f4f4d3c42e898c64c1c17bd03f6",level:3},{value:"Autoscaler",id:"08f9793fd7704349917da275cbdb278d",level:3},{value:"Alright, what is <em>this</em> TOML file doing?",id:"187cba7f2fac4431ad7d602eb0439522",level:3},{value:"Deploy and scale workers on multiple queues",id:"c430c95b5c2f494a9419b399f7d11dd5",level:2},{value:"Update the metrics proxy",id:"5da3c3cc3cac495caca1b77d126e1d36",level:3},{value:"Update the autoscaler",id:"5885df5be6e64e49a34952cba12ec5c4",level:3},{value:"Undeploy the Apps",id:"20f4f803bb2849819c9cf0e958f71841",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"f71aa082c32c49d1a43a8add8fbca628",children:"Deployment on Fly.io"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"http://fly.io/",children:"Fly.io"})," is an accessible, straightforward cloud platform where you can deploy and manage full-stack VMs with the convenience of containers. Metapage workers can be deployed on Fly by defining and launching a couple of Fly apps."]}),"\n",(0,s.jsx)(n.h2,{id:"f58f1df8856f4eeebe706cccae23e8cc",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["A ",(0,s.jsx)(n.a,{href:"http://fly.io/",children:"Fly.io"})," account, of course"]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.a,{href:"https://fly.io/docs/flyctl/install/",children:"flyctl"})," command line utility"]}),"\n",(0,s.jsxs)(n.li,{children:["A random queue ID that the Metapage workers use to listen and receive jobs. This queue ID will need to be provided to both the deployed workers and the metaframe you want them processing jobs for.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If you\u2019re on MacOS or Linux, you should be able to generate a UUID with the ",(0,s.jsx)(n.code,{children:"uuid"})," command, and this suits the case perfectly."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Deploy the worker app"}),"\n",(0,s.jsxs)(n.p,{children:["Fly apps are usually defined with a TOML configuration file. Copy the following Fly TOML config to a file named ",(0,s.jsx)(n.code,{children:"workers-a.fly.toml"}),". Replace ",(0,s.jsx)(n.code,{children:"MyOrg"})," with a unique name to prefix your app with \u2014 your actual Fly Organization name is a good choice for this. If you\u2019re just using a personal account, this is probably your username. Run ",(0,s.jsx)(n.code,{children:"fly orgs list"})," to show your orgs."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:"# See https://fly.io/docs/reference/configuration/ for information about how to use this file.\n\napp = 'MyOrg-metapage-workers-a'\nprimary_region = 'ord'\n\n[build]\n  image = 'metapage/metaframe-docker-worker:latest-standalone'\n\n# This example uses 2CPU/4GB RAM machines with an attached L40S GPU. These can\n# get pricey, so make sure it's not sticking around when you don't need it!\n# (Check the section on autoscaling below for more)\n[[vm]]\n  memory = '4gb'\n  cpu_kind = 'performance'\n  cpus = 2\n  size = 'l40s'\n\n[env]\n  METAPAGE_IO_CPUS = 2\n  METAPAGE_IO_GPUS = 1\n  METAPAGE_IO_WORKER_RUN_STANDALONE = true\n\n[[restart]]\n  policy = \"on-failure\"\n  retries = 10\n"})}),"\n",(0,s.jsx)(n.h3,{id:"7733defd882c43879c1aca35bd0f9fad",children:"Hey, what is this TOML file doing?"}),"\n",(0,s.jsxs)(n.p,{children:["If you prefer to sink your teeth deep into the fly app configuration features immediately, you can check out the ",(0,s.jsx)(n.a,{href:"https://fly.io/docs/reference/configuration/",children:"full fly.toml app configuration doc"}),". Otherwise, let\u2019s step through the above file\u2019s contents to explain what each section is doing."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"primary_region"})," defines what geographical region machines will be created in by default. ",(0,s.jsx)(n.code,{children:"ord"})," is the code for Chicago, Illinois, chosen here because it\u2019s the only region with L40S GPUs available at time of writing. If you want to change this, you can run ",(0,s.jsx)(n.code,{children:"fly platform regions"})," or check the ",(0,s.jsx)(n.a,{href:"https://fly.io/docs/reference/regions/",children:"Regions documentation"})," to see the extensive list of possible regions to run your workers."]}),"\n",(0,s.jsx)(n.p,{children:"This just tells Fly that we want to use the latest \u201cstandalone\u201d version of the metapage worker image from Docker Hub. The standalone image provides its own container daemon rather than relying on the host to provide one."}),"\n",(0,s.jsxs)(n.p,{children:["This section defines some of the compute capabilities we\u2019re reserving. In this case, 2 dedicated CPU cores, 4GB of RAM, and an Nvidia L40S GPU attached. You can get a look at what CPU/RAM/GPU options are available on Fly\u2019s ",(0,s.jsx)(n.a,{href:"https://fly.io/docs/about/pricing/",children:"pricing page"}),", and see the ",(0,s.jsx)(n.a,{href:"https://fly.io/docs/reference/configuration/#the-vm-section",children:"VM section"})," of the configuration docs for the keywords to configure the machines to your liking."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"METAPAGE_IO_GPUS"})," does ditto for GPUs. We have 1, so we set this to ",(0,s.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"METAPAGE_IO_WORKER_RUN_STANDALONE"})," is an option made available for environments that don\u2019t provide a running docker daemon for the metapage worker. The non-standalone version of the worker expects such a daemon to be accessible, but this option tells the worker to provide ",(0,s.jsx)(n.em,{children:"its own"})," container runtime instead."]}),"\n",(0,s.jsxs)(n.p,{children:["This tells fly that if our worker exits normally, we can leave it ",(0,s.jsx)(n.code,{children:"stopped"})," , but if it crashes, we should restart it. It will try to restart 10 times before giving up if issues persist."]}),"\n",(0,s.jsx)(n.p,{children:"We\u2019ll stage a secret for the app before we deploy its full configuration, so first create an empty app:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"fly apps create MyOrg-metapage-workers-a \n"})}),"\n",(0,s.jsx)(n.p,{children:"(don\u2019t forget to replace MyOrg with your unique prefix)"}),"\n",(0,s.jsxs)(n.p,{children:["Then set a secret on the app, using the metapage queue ID specified in the ",(0,s.jsx)(n.a,{href:"/docs/container-provider-flyio#f58f1df8856f4eeebe706cccae23e8cc",children:"Prerequisites"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"fly secrets set -a MyOrg-metapage-workers-a METAPAGE_IO_QUEUE=[MyGeneratedQueueId]\n"})}),"\n",(0,s.jsx)(n.p,{children:"We\u2019re ready to deploy the worker! Run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"fly deploy -c workers-a.fly.toml --yes --ha=false\n"})}),"\n",(0,s.jsx)(n.p,{children:"This will deploy the new app with the file\u2019s definition, accept all the usual prompts, and prevent deploying in High Availability mode (in other words, it will create 1 VM instead of 2)."}),"\n",(0,s.jsx)(n.p,{children:"Once it finishes, you should be able to see your app in the Fly dashboard. Take a peek:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:o(98164).A+"",width:"1872",height:"1354"})}),"\n",(0,s.jsxs)(n.p,{children:["It looks like the worker is deployed and running, but check out the logs (under ",(0,s.jsx)(n.code,{children:"Live Logs"}),") to make sure it\u2019s successfully connected to its queue."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:o(75312).A+"",width:"1864",height:"1027"})}),"\n",(0,s.jsxs)(n.p,{children:["You can also follow the app logs from the command line at any time with ",(0,s.jsx)(n.code,{children:"fly logs -a MyOrg-metapage-workers-a"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"e483fac6e3864e15ad1eb91a094feb75",children:"Scale the workers"}),"\n",(0,s.jsxs)(n.p,{children:["Adjusting the number of worker machines by hand is easy. If you want 2 workers, just run ",(0,s.jsx)(n.code,{children:"fly scale count 2 -a MyOrg-metapage-workers-a"}),". The same works for 4, 10, or 0."]}),"\n",(0,s.jsxs)(n.p,{children:["You can look at the machines you just created either in the web UI or with ",(0,s.jsx)(n.code,{children:"fly machines list -a MyOrg-metapage-workers-a"}),"."]}),"\n",(0,s.jsxs)(n.h2,{id:"8e81556971984e71ac4568c5aec1dc5d",children:[(0,s.jsx)(n.em,{children:"Auto"}),"-scale the workers"]}),"\n",(0,s.jsx)(n.p,{children:"You might want a lot of workers, but you don\u2019t want to play with the numbers by hand. It\u2019s error-prone, and forgotten machines can run up a bill. We can auto-scale instead (including scale-to-zero) by deploying a couple other small apps."}),"\n",(0,s.jsx)(n.h3,{id:"06965f4f4d3c42e898c64c1c17bd03f6",children:"Metrics proxy"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/miend/fly-metrics-proxy",children:"Fly Metrics Proxy"})," is a simple service for forwarding Prometheus-compatible metrics to Fly.io\u2019s managed Prometheus service. It listens for requests to its ",(0,s.jsx)(n.code,{children:"/metrics"})," endpoint, and then in turn fetches a number of other metrics from external endpoints we define, aggregates them, attaches additional labels, and sends them all back to Fly. This will let us provide Fly with metrics about our job queue(s) from Metapage\u2019s API to determine whether we should spin more workers up or down."]}),"\n",(0,s.jsxs)(n.p,{children:["You\u2019ll need that Queue ID handy which you generated earlier for the original worker deployment. Then, copy the below config to a file named ",(0,s.jsx)(n.code,{children:"metrics-proxy.toml"}),", replacing ",(0,s.jsx)(n.code,{children:"MyOrg"})," with your org name:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'app = \'MyOrg-metrics-proxy\'\nprimary_region = \'ord\'\n\n[build]\n\t# TODO: If we can host/mirror this in metapage\'s docker, replace below line!\n  image = \'docker.io/michaelendsley/fly-metrics-proxy:latest\'\n\n[env]\n  METRICS_TARGETS = """\n[\n  {\n    "endpoint": "https://container.mtfm.io/MyGeneratedQueueID/metrics",\n    "app_name": "MyOrg-metapage-workers-a"\n  }\n]\n"""\n\n[[vm]]\n  memory = \'256mb\'\n  cpu_kind = \'shared\'\n  cpus = 1\n\n[metrics]\n  port = 8080\n  path = \'/metrics\'\n  https = false\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This app will listen for requests to ",(0,s.jsx)(n.code,{children:"/metrics"})," from Fly, and will in turn reach out to the Metapage public API for your job queue\u2019s metrics (we provide a single metric of ",(0,s.jsx)(n.code,{children:"queue_length"}),"), attach a label \u201capp_name\u201d to it, and return it to Fly in its response."]}),"\n",(0,s.jsx)(n.p,{children:"You don\u2019t need to do any special setup for this app. Just use this command to get it running:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"fly launch -c metrics-proxy.toml --copy-config --yes --ha=false\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If you want to confirm that it\u2019s doing what it should (beyond looking at the app logs), the ",(0,s.jsx)(n.a,{href:"http://fly.io/",children:"Fly.io"})," dashboard has a ",(0,s.jsx)(n.code,{children:"Metrics"})," section that takes you to a provided Grafana dashboard. You can explore metrics there to find your ",(0,s.jsx)(n.code,{children:"queue_length"})," metric, with a label ",(0,s.jsx)(n.code,{children:"app_name"})," equal to your Fly worker app\u2019s name."]}),"\n",(0,s.jsx)(n.h3,{id:"08f9793fd7704349917da275cbdb278d",children:"Autoscaler"}),"\n",(0,s.jsxs)(n.p,{children:["Next, we\u2019ll use ",(0,s.jsx)(n.a,{href:"https://github.com/superfly/fly-autoscaler",children:"Fly Autoscaler"})," which can leverage the metrics we just provided to scale the worker app. Actually, it can scale more than 1 set of workers, but more on that below."]}),"\n",(0,s.jsxs)(n.p,{children:["Copy the below config to a file named ",(0,s.jsx)(n.code,{children:"autoscaler.fly.toml"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'app = "MyOrg-metapage-autoscaler"\n\n[build]\nimage = "flyio/fly-autoscaler:0.3.1"\n\n[env]\nFAS_APP_NAME = "MyOrg-metapage-workers-a"\nFAS_STARTED_MACHINE_COUNT = "ceil(queue_length / 1)"\nFAS_PROMETHEUS_ADDRESS = "https://api.fly.io/prometheus/MyOrg"\nFAS_PROMETHEUS_METRIC_NAME = "queue_length"\nFAS_PROMETHEUS_QUERY = "sum(queue_length{app=\'$APP_NAME\'})"\n\n[metrics]\nport = 9090\npath = "/metrics"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Don\u2019t forget to replace instances of ",(0,s.jsx)(n.code,{children:"MyOrg"})," with your org name!"]}),"\n",(0,s.jsxs)(n.h3,{id:"187cba7f2fac4431ad7d602eb0439522",children:["Alright, what is ",(0,s.jsx)(n.em,{children:"this"})," TOML file doing?"]}),"\n",(0,s.jsxs)(n.p,{children:["Ignoring the parts already explained before in the ",(0,s.jsx)(n.code,{children:"workers-a.fly.toml"}),", this just defines a few Fly Autoscaler-specific environment variables."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"FAS_APP_NAME"})," sets the name of the app(s) targeted for autoscaling. This supports wildcard matches, but right now we\u2019re looking for the exact name of our worker app."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"FAS_STARTED_MACHINE_COUNT"})," is an ",(0,s.jsx)(n.a,{href:"https://expr-lang.org/docs/language-definition",children:"Expr"})," language expression defining how many machines in our app\u2019s current pool of machines should be in a ",(0,s.jsx)(n.em,{children:"started"})," state. These are the ones for which you\u2019ll be charged CPU/GPU & RAM by Fly, as long as they\u2019re running. This expression says that our machine count should be the same number of jobs in the queue. If we assumed each worker could handle 2 jobs from the queue instead of 1, it could become ",(0,s.jsx)(n.code,{children:"ceil(queue_length / 2)"}),". If we wanted one worker always online, it could be ",(0,s.jsx)(n.code,{children:"ceil(queue_length / 2) + 1"}),", and so on."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"FAS_PROMETHEUS_ADDRESS"})," , ",(0,s.jsx)(n.code,{children:"FAS_PROMETHEUS_METRIC_NAME"})," , and ",(0,s.jsx)(n.code,{children:"FAS_PROMETHEUS_QUERY"})," all relate to the query the autoscaler is making from the Fly-managed Prometheus instance provided for each org. ",(0,s.jsx)(n.code,{children:"queue_length"})," is the metric provided by the metapage worker representing queue jobs not in a ",(0,s.jsx)(n.code,{children:"Finished"})," state."]}),"\n",(0,s.jsx)(n.p,{children:"Just as we did with the worker app, we\u2019ll create an empty app for the autoscaler first, then set a couple of secrets before we deploy it."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"fly apps create MyOrg-metapage-autoscaler\n"})}),"\n",(0,s.jsx)(n.p,{children:"Create a deploy token for your worker app, which will give Fly Autoscaler permission to perform scaling operations on it:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"fly tokens create deploy -a MyOrg-metapage-workers-a\n"})}),"\n",(0,s.jsx)(n.p,{children:"Set the value of this as a secret on the autoscaler:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'fly secrets set -a MyOrg-metapage-autoscaler FAS_API_TOKEN="[deploy token value]"\n'})}),"\n",(0,s.jsx)(n.p,{children:"Create a read-only token that will let the autoscaler read from your org\u2019s managed Prometheus endpoint:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"fly tokens create readonly MyOrg\n"})}),"\n",(0,s.jsx)(n.p,{children:"And set this as a secret, too:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'fly secrets set -a my-autoscaler FAS_PROMETHEUS_TOKEN="[readonly token value]"\n'})}),"\n",(0,s.jsx)(n.p,{children:"Finally, deploy the autoscaler:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"fly deploy -c autoscaler.fly.toml --ha=false\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The option ",(0,s.jsx)(n.code,{children:"--ha=false"})," prevents the autoscaler from launching with more than 1 machine in its app."]}),"\n",(0,s.jsxs)(n.p,{children:["At this point, the autoscaler should spin up and start evaluating the ",(0,s.jsx)(n.code,{children:"queue_depth"})," metric and determining if it needs to start or stop any worker machines in your deployed app. The limit on the number of machines that can be started is simply the scale of your app. If you currently have just 1 machine running in your worker app, try running ",(0,s.jsx)(n.code,{children:"fly scale count 5 -a MyOrg-metapage-workers-a"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["If you have no active jobs in the queue, you should see a number of machines spin up at first, and then the autoscaler will begin stopping them as part of its reconciliation loop. In short order you\u2019ll be left with 5 ",(0,s.jsx)(n.code,{children:"Stopped"})," machines."]}),"\n",(0,s.jsxs)(n.p,{children:["If 5 or more unfinished jobs stick around the metapage queue for your workers, then you should see the number of ",(0,s.jsx)(n.code,{children:"Running"})," machines automatically scale up to the limit (5), and drop again once enough jobs are processed."]}),"\n",(0,s.jsx)(n.h2,{id:"c430c95b5c2f494a9419b399f7d11dd5",children:"Deploy and scale workers on multiple queues"}),"\n",(0,s.jsxs)(n.p,{children:["If you want to process jobs on multiple queues, you\u2019ll need multiple worker apps to match. You can, for example, ",(0,s.jsx)(n.code,{children:"cp workers-a.fly.toml workers-b.fly.toml"})," and modify the contents to end up with something like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:"# See https://fly.io/docs/reference/configuration/ for information about how to use this file.\n\napp = 'MyOrg-metapage-workers-b'\nprimary_region = 'ord'\n\n[build]\n  image = 'metapage/metaframe-docker-worker:latest-standalone'\n\n[[vm]]\n  memory = '2gb'\n  cpu_kind = 'shared'\n  cpus = 2\n\n[env]\n  METAPAGE_IO_CPUS = 2\n  METAPAGE_IO_WORKER_RUN_STANDALONE = true\n\n[...redundant parts snipped...]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Deploy this one just like before, by first creating the empty app and setting its ",(0,s.jsx)(n.code,{children:"METAPAGE_IO_QUEUE"})," as a secret, and then using ",(0,s.jsx)(n.code,{children:"fly deploy [...]"})," . You should now have two worker groups running."]}),"\n",(0,s.jsx)(n.h3,{id:"5da3c3cc3cac495caca1b77d126e1d36",children:"Update the metrics proxy"}),"\n",(0,s.jsxs)(n.p,{children:["Your metrics proxy should be requesting metrics for your first job queue, but now that you\u2019re adding a second set of workers, you\u2019ll want to update it so it fetches the metrics for that too. In ",(0,s.jsx)(n.code,{children:"metrics-proxy.toml"}),", change the environment variable ",(0,s.jsx)(n.code,{children:"METRICS_TARGETS"})," like so:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'[env]\n  METRICS_TARGETS = """\n[\n  {\n    "endpoint": "https://container.mtfm.io/MyGeneratedQueueID/metrics",\n    "app_name": "MyOrg-metapage-workers-a"\n  },\n  {\n\t  "endpoint": "https://container.mtfm.io/MySecondQueueID/metrics",\n\t  "app_name": "MyOrg-metapage-workers-b"\n\t}\n]\n"""\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Deploy with a ",(0,s.jsx)(n.code,{children:"fly deploy -c metrics-proxy.toml --ha=false"}),", and the metrics proxy will begin forwarding metrics for both of your queues."]}),"\n",(0,s.jsx)(n.h3,{id:"5885df5be6e64e49a34952cba12ec5c4",children:"Update the autoscaler"}),"\n",(0,s.jsxs)(n.p,{children:["If you stuck with the naming scheme presented in this doc, adding this new worker app to the autoscaler config is straightforward as well. You\u2019ll only need two changes to your ",(0,s.jsx)(n.code,{children:"autoscaler.fly.toml"})," , both of them under the ",(0,s.jsx)(n.code,{children:"[env]"})," section:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'[env]\nFAS_APP_NAME = "MyOrg-metapage-workers-*" # this one is changed\nFAS_ORG = "MyOrg" # this one is new\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"FAS_APP_NAME"})," is defined here with a wildcard. The autoscaler will look for any apps matching that wildcard pattern (in this case both ",(0,s.jsx)(n.code,{children:"a"})," and ",(0,s.jsx)(n.code,{children:"b"}),"), and assume it should be scaling both of them."]}),"\n",(0,s.jsxs)(n.p,{children:["Since it\u2019s now targeting multiple apps in the org instead of just one, you\u2019ll also need to switch its ",(0,s.jsx)(n.code,{children:"FAS_API_TOKEN"})," to one with privileges across the org. Create the token:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"fly tokens create org\n"})}),"\n",(0,s.jsx)(n.p,{children:"Then set it on the autoscaler app:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'fly secrets set -a MyOrg-metapage-autoscaler FAS_API_TOKEN="[org token value]"\n'})}),"\n",(0,s.jsx)(n.p,{children:"Redeploy the autoscaler:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"fly deploy -c autoscaler.fly.toml\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The autoscaler will process the ",(0,s.jsx)(n.code,{children:"queue_length"})," metric queries for each app and reconcile their started machine counts separately."]}),"\n",(0,s.jsx)(n.h2,{id:"20f4f803bb2849819c9cf0e958f71841",children:"Undeploy the Apps"}),"\n",(0,s.jsx)(n.p,{children:"Getting rid of any of the deployed applications is as simple as:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"fly apps destroy [appname]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This will delete the app and ",(0,s.jsx)(n.em,{children:"all resources"})," associated with it."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},75312:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/container-provider-flyio.fff06d99-53d9-4513-9254-dbf21d9332bb-9debef247486fcf5a66ba575e41d49cc.png"},98164:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/container-provider-flyio.623d441c-0612-463a-9c9a-b5dd38ece30b-9c5453cfc55e2849711cfed8958d52b6.png"}}]);