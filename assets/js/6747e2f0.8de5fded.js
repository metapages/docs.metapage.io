"use strict";(self.webpackChunkmetapage_docs=self.webpackChunkmetapage_docs||[]).push([[6246],{5954:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var o=n(1527),i=n(3703);const a={title:"Working with docker metaframes",sidebar_position:3,slug:"/working-with-docker-metaframes",authors:"karl"},r=void 0,s={id:"Getting-Started/working-with-docker-metaframes",title:"Working with docker metaframes",description:"Now that you know how to create simple metapages, from adding metaframes and constructing data connections between them, to uploading and displaying images and running python with pyodide and displaying its output in a linked metaframe, we will now learn how to use one of the most powerful tools in metapages, the Docker metaframe. In basic terms, Docker is a technology that allows you to create and run virtual computer systems within any other system. This is powerful because in this system, called a container, you can install exactly the software needed to run code, and the same docker container is identical no matter what system it is run on, so your code will always work, no matter where or when you run it. This powerful technology can be leveraged in metaframes with custom docker containers or configurations, allowing you to run virtually any code you can imagine. The applications are endless! To get you started with Docker in metaframes, let\u2019s go through the simple example of creating a word cloud with python.",source:"@site/docs/Getting-Started/working-with-docker-metaframes.mdx",sourceDirName:"Getting-Started",slug:"/working-with-docker-metaframes",permalink:"/docs/working-with-docker-metaframes",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Working with docker metaframes",sidebar_position:3,slug:"/working-with-docker-metaframes",authors:"karl"},sidebar:"tutorialSidebar",previous:{title:"Running Python with Pyodide",permalink:"/docs/python-pyodide-walkthrough"}},l={},c=[];function d(e){const t={img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"Now that you know how to create simple metapages, from adding metaframes and constructing data connections between them, to uploading and displaying images and running python with pyodide and displaying its output in a linked metaframe, we will now learn how to use one of the most powerful tools in metapages, the Docker metaframe. In basic terms, Docker is a technology that allows you to create and run virtual computer systems within any other system. This is powerful because in this system, called a container, you can install exactly the software needed to run code, and the same docker container is identical no matter what system it is run on, so your code will always work, no matter where or when you run it. This powerful technology can be leveraged in metaframes with custom docker containers or configurations, allowing you to run virtually any code you can imagine. The applications are endless! To get you started with Docker in metaframes, let\u2019s go through the simple example of creating a word cloud with python."}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Step 1:"})," As done in the previous tutorials, create a new metapage. We will call ours \u201cWord Cloud with Docker\u201d"]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{src:n(382).Z+"",width:"866",height:"364"})}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Step 2:"})," We will use four metaframes to construct this metapage. Two \u201cText Editor\u201d metaframes, one \u201cShow Image\u201d, and one \u201cDocker\u201d metaframe. To add these, enter Edit mode, use the search bar to find them (the official versions should have the \u201cbase\u201d tag), and add them to the metapage with the Add button."]}),"\n",(0,o.jsx)(t.li,{children:"I think I understand that under docker image, \u201cUse existing image\u201d will take the image name from docker hub."}),"\n",(0,o.jsxs)(t.li,{children:["Build Image from Repo:","\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"You can specify the Dockerfile by clicking edit next to Dockerfile"}),"\n",(0,o.jsx)(t.li,{children:"What does Git Repo URL do? Just clone the repo into the home directory? You could also clone the repo, or multiple repos in the Dockerfile, so I\u2019m not sure if this makes sense."}),"\n",(0,o.jsx)(t.li,{children:"Why do we need to specify a Dockerfile Name?"}),"\n",(0,o.jsx)(t.li,{children:"What is Target?"}),"\n",(0,o.jsx)(t.li,{children:"Build Args? (ohhh is that like the flags we would specify in the docker build command?)"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["Configure Job","\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Container Settings","\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Command \u2014 this is the shell script that we want to run as soon as we enter the docker container? Can we run several scripts if we separate them by a semicolon?"}),"\n",(0,o.jsx)(t.li,{children:"Entrypoint?"}),"\n",(0,o.jsx)(t.li,{children:"Workdir?"}),"\n",(0,o.jsx)(t.li,{}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},382:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/working-with-docker-metaframes.104c69d0-ca1d-4ba7-b17b-75c29af6f242-727ac1e2e5a2519d7c0c6e6c00b09515.png"},3703:(e,t,n)=>{n.d(t,{Z:()=>s,a:()=>r});var o=n(959);const i={},a=o.createContext(i);function r(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);