"use strict";(self.webpackChunkmetapage_docs=self.webpackChunkmetapage_docs||[]).push([[4895],{40932:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"Concepts/embed-metapage","title":"Embed a metapage in your React app","description":"Live example","source":"@site/docs/Concepts/embed-metapage.mdx","sourceDirName":"Concepts","slug":"/embed-metapage","permalink":"/docs/embed-metapage","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"Embed a metapage in your React app","sidebar_position":5,"slug":"/embed-metapage"},"sidebar":"tutorialSidebar","previous":{"title":"Embed a metaframe in a React app","permalink":"/docs/embed-metaframe"},"next":{"title":"How do metapages work?","permalink":"/docs/how-metapages-work"}}');var o=n(74848),s=n(28453);const i={title:"Embed a metapage in your React app",sidebar_position:5,slug:"/embed-metapage"},r=void 0,p={},d=[{value:"<strong>Live example</strong>",id:"a526da9609654d26b4843460cfa5a0f6",level:2}];function m(e){const t={a:"a",code:"code",h2:"h2",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.mermaid,{value:"flowchart LR\n    subgraph test [your-site.com]\n        direction TB\n\n        style js fill:#fff,stroke:#fff,stroke-width:2px\n        style mf1 fill:#fff,stroke:#32AEE4,stroke-width:2px\n        style mf2 fill:#fff,stroke:#32AEE4,stroke-width:2px\n        style mf3 fill:#fff,stroke:#32AEE4,stroke-width:2px\n\n        subgraph metapage [metapage]\n\n            mf1[metaframe 1] --\x3e mf2[metaframe 2]\n            mf2 --\x3e mf3[metaframe 3]\n            mf1 --\x3e mf3\n        end\n        js[ javascript] <--\x3e |messages| metapage\n    end"}),"\n",(0,o.jsx)(t.h2,{id:"a526da9609654d26b4843460cfa5a0f6",children:(0,o.jsx)(t.strong,{children:"Live example"})}),"\n",(0,o.jsx)(t.p,{children:"This live example shows how to embed a metapage in a React app."}),"\n",(0,o.jsx)(t.p,{children:"First imports:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:'import { MetapageGridLayoutFromDefinition } from "@metapages/metapage-grid-react";\n'})}),"\n",(0,o.jsxs)(t.p,{children:["You can copy the metapage JSON (blue button) and paste in ",(0,o.jsx)(t.a,{href:"https://app.metapages.org/",children:"https://app.metapages.org/"})," to see the live app."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",metastring:"live",live:!0,children:'function ExampleEmbedMetapage() {\n  const [definition, setDefinition] = useState();\n\n  useEffect(() => {\n\t\t(async () => {\n\t\t\t\tvar resp = await fetch("https://app.metapage.io/dion/example-hello-world-b4dc42b55df94364a1ebac10e8e91f32/metapage.json");\n\t\t\t\tvar metapageJson = await resp.json();\n\t\t\t\tsetDefinition(metapageJson);\n\t\t})();\n\t}, []);\n\n  const onOutputs = (outputs) => {\n    // This is where the metapage state changes, via metaframes setting\n    // outputs and passing them to downstream metaframes.\n    // You can intercept the data state changes for your own purposes\n    // console.log(`Got outputs!! outputs=${JSON.stringify(outputs)}`);\n  };\n\n  // hack to copy metapage JSON to clipboard\n  const copyToClipboard = useCallback(() => {\n    var textarea = document.createElement("textarea");\n    textarea.value = JSON.stringify(definition);\n    document.body.appendChild(textarea);\n    textarea.select();\n    document.execCommand("copy");\n    document.body.removeChild(textarea);\n  }, [definition]);\n\n  const CustomGridItemComponentLabel = useMemo(() => {\n    return React.forwardRef((props, ref) => {\n      return (\n        <div\n          style={{\n            overflow: "hidden",\n            padding: "10px",\n            backgroundColor: "white",\n            border: "1px solid lightgrey",\n\t\t\t\t\t\twidth: "100%",\n\t\t\t\t\t\theight: "100%",\n            ...props.style,\n          }}\n          className={props.className}\n          ref={ref}\n        >\n          <h4 style={{ textAlign: "right" }}>\n            <span style={{ padding: "2px", color: "lightgrey" }}>\n              {props.children[0].key}\n            </span>\n          </h4>\n          {props.children}\n        </div>\n      );\n    });\n  }, []);\n\n  const onDefinition = useCallback(\n    (def) => {\n      setDefinition(def);\n    },\n    [setDefinition]\n  );\n\n  return (\n    <>\n      <button\n        onClick={copyToClipboard}\n        style={{\n          backgroundColor: "#32AEE4",\n          borderWidth: "0px",\n          color: "#ffffff",\n          fontWeight: 800,\n          position: "relative",\n          outline: "none",\n          borderRadius: "6px",\n          display: "flex",\n          justifyContent: "center",\n          alignItems: "center",\n          cursor: "pointer",\n          height: "30px",\n          width: "120px",\n        }}\n      >\n        Copy metapage\n      </button>\n      <MetapageGridLayoutFromDefinition\n        definition={definition}\n        onOutputs={onOutputs}\n        onDefinition={onDefinition}\n        Wrapper={CustomGridItemComponentLabel}\n      />\n    </>\n  );\n}\n'})})]})}function c(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>r});var a=n(96540);const o={},s=a.createContext(o);function i(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);